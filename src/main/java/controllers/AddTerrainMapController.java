package controllers;

import Models.Terrain;
import Services.TerrainService;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;
import netscape.javascript.JSObject;

import java.sql.SQLException;
import java.util.Date;

public class AddTerrainMapController {
    @FXML private WebView mapWebView;
    @FXML private TextField descriptionField;
    @FXML private TextField superficieField;
    @FXML private TextField prixLocationField;
    @FXML private TextField latitudeField;
    @FXML private TextField longitudeField;
    @FXML private Label weatherLabel;

    private Stage stage;
    private TerrainService terrainService = new TerrainService();
    private WebEngine webEngine;

    public void setStage(Stage stage) {
        this.stage = stage;
    }

    @FXML
    public void initialize() {
        webEngine = mapWebView.getEngine();
        webEngine.setJavaScriptEnabled(true);

        // Set WebView size to match the layout (760x300 pixels)
        mapWebView.setPrefSize(760, 300);

        // Load map.html from resources
        String mapUrl = getClass().getResource("/map.html") != null ? getClass().getResource("/map.html").toExternalForm() : null;
        if (mapUrl == null) {
            webEngine.loadContent("<html><body><h1>Error: map.html not found</h1></body></html>");
            showAlert("Erreur", "Fichier map.html introuvable. Vérifiez le dossier src/main/resources/.");
        } else {
            webEngine.load(mapUrl);
        }

        // Set up JavaScript bridge when the map loads successfully
        webEngine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -> {
            if (newState == javafx.concurrent.Worker.State.SUCCEEDED) {
                JSObject window = (JSObject) webEngine.executeScript("window");
                window.setMember("java", new JavaBridge());
                // Optionally set initial marker at Tunis
                webEngine.executeScript("setMarker(36.8065, 10.1815);");
            } else if (newState == javafx.concurrent.Worker.State.FAILED) {
                showAlert("Erreur", "Échec du chargement de la carte: " + webEngine.getLoadWorker().getException());
            }
        });

        // Initialize weather label
        weatherLabel.setText("Météo: Cliquez sur la carte pour voir la météo.");
    }

    // JavaScript bridge to receive map click coordinates and weather updates
    public class JavaBridge {
        public void onMapClick(double lat, double lng) {
            Platform.runLater(() -> {
                latitudeField.setText(String.format("%.6f", lat));
                longitudeField.setText(String.format("%.6f", lng));
            });
        }

        public void onWeatherUpdate(JSObject weatherInfo) {
            Platform.runLater(() -> {
                String city = (String) weatherInfo.getMember("city");
                String temperature = String.valueOf(weatherInfo.getMember("temperature"));
                String description = (String) weatherInfo.getMember("description");
                weatherLabel.setText(String.format("Météo à %s: %s°C, %s", city, temperature, description));
            });
        }

        public void onWeatherError(String errorMessage) {
            Platform.runLater(() -> {
                weatherLabel.setText("Météo: " + errorMessage);
            });
        }
    }

    @FXML
    private void handleSave() {
        String description = descriptionField.getText().trim();
        String superficieStr = superficieField.getText().trim();
        String prixLocationStr = prixLocationField.getText().trim();
        String latitudeStr = latitudeField.getText().trim();
        String longitudeStr = longitudeField.getText().trim();

        if (description.isEmpty() || superficieStr.isEmpty() || prixLocationStr.isEmpty() || latitudeStr.isEmpty() || longitudeStr.isEmpty()) {
            showAlert("Erreur", "Veuillez remplir tous les champs et sélectionner un emplacement sur la carte.");
            return;
        }

        try {
            Terrain terrain = new Terrain(
                    0, // id, auto-generated by database
                    null, // utilisateur, not provided
                    description,
                    Double.parseDouble(superficieStr),
                    Double.parseDouble(latitudeStr),
                    Double.parseDouble(longitudeStr),
                    Double.parseDouble(prixLocationStr),
                    true, // disponibilite, default to true
                    new Date()
            );
            terrainService.ajouter(terrain);
            showAlert("Succès", "Terrain ajouté avec succès");
            stage.close();
        } catch (NumberFormatException e) {
            showAlert("Erreur", "Veuillez entrer des valeurs numériques valides.");
        } catch (SQLException e) {
            showAlert("Erreur", "Erreur lors de l'ajout du terrain: " + e.getMessage());
        }
    }

    @FXML
    private void handleCancel() {
        stage.close();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(title.equals("Succès") ? Alert.AlertType.INFORMATION : Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}